input {
  tcp {
    port => 5044
    codec => line
  }
}

filter {
  # Try to parse message as JSON
  json {
    source => "message"
    target => "parsed_json"
    add_tag => [ "json_parsed" ]
    skip_on_invalid_json => true
  }

  # Handle JSON parsing failure
  if "_jsonparsefailure" in [tags] {
    mutate {
      remove_tag => ["_jsonparsefailure"]
      add_tag => ["json_invalid"]
    }

    # If JSON parsing failed, try to parse as CSV
    csv {
      source => "message"
      target => "parsed_csv"
      columns => ["col1", "col2", "col3"] # Define columns as per your CSV format
      add_tag => [ "csv_parsed" ]
    }

    # Handle CSV parsing failure
    if "_csvparsefailure" in [tags] {
      mutate {
        remove_tag => ["_csvparsefailure"]
        add_tag => ["csv_invalid"]
      }

      # If both JSON and CSV parsing failed, treat as plain text
      mutate {
        add_tag => ["plain_text"]
      }
    }
  }
}

output {
  if "json_parsed" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "logstash-json-%{+YYYY.MM.dd}"
    }
  } else if "csv_parsed" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "logstash-csv-%{+YYYY.MM.dd}"
    }
  } else if "plain_text" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "logstash-plain-%{+YYYY.MM.dd}"
    }
  } else {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "logstash-invalid-%{+YYYY.MM.dd}"
    }
  }
  stdout { codec => rubydebug }
}
