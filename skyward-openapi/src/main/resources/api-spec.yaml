openapi: 3.0.3
info:
  title: User and Project Management API
  description: API for managing users and their external projects
  version: 1.0.0
  contact:
    name: Dmitriy Sosnovich
    url: http://sosnovich.com
    email: dmitriy@sosnovich.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:8080/api
    description: Local server
paths:
  /auth/login:
    post:
      summary: Authenticate user and generate JWT token
      operationId: authenticateUser
      requestBody:
        $ref: '#/components/requestBodies/Credentials'
      responses:
        '200':
          $ref: '#/components/responses/AuthResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /users:
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/NewUser'
      responses:
        '201':
          $ref: '#/components/responses/UserCreated'
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          $ref: '#/components/responses/UsersConflict409Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{id}:
    get:
      summary: Retrieve user information
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/UserResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/UserNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Successfully deleted user
          headers:
            trace.id:
              description: Trace ID for the request
              schema:
                type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          $ref: '#/components/responses/ConcurrencyError'
        '404':
          $ref: '#/components/responses/UserNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update user information
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      requestBody:
        description: Updated user data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
            examples:
              example-1:
                value:
                  email: "updateduser@example.com"
                  password: "updatedpassword123"
                  name: "Updated User"
                  role: "ADMIN"
                  accountExpired: false
                  accountLocked: false
                  credentialsExpired: false
                  disabled: false
      responses:
        '200':
          description: Successfully updated user
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/UserNotFoundError'
        '409':
          $ref: '#/components/responses/ConcurrencyError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{id}/projects:
    post:
      summary: Add external project to a user
      operationId: addExternalProject
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/NewExternalProject'
      responses:
        '201':
          $ref: '#/components/responses/ExternalProjectCreated'
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '409':
          $ref: '#/components/responses/UserProjectsConflict409Error'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      summary: Retrieve external projects from a user
      operationId: getExternalProjects
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/ExternalProjectsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/UserNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UpdateUser:
      type: object
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        password:
          type: string
        role:
          type: string
        accountExpired:
          type: boolean
        accountLocked:
          type: boolean
        credentialsExpired:
          type: boolean
        disabled:
          type: boolean
      example:
        email: "updateduser@example.com"
        name: "Updated User"
        password: "updatedpassword123"
        role: "ADMIN"
        accountExpired: false
        accountLocked: false
        credentialsExpired: false
        disabled: false
    Credentials:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      example:
        email: "user@example.com"
        password: "password123"
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        name:
          type: string
      example:
        id: 1
        email: "user@example.com"
        name: "John Doe"
      required:
        - id
        - email
        - name
    NewUser:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        name:
          type: string
      example:
        email: "newuser@example.com"
        password: "newpassword123"
        name: "New User"
      required:
        - email
        - password
        - name
    ExternalProject:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: integer
        name:
          type: string
      example:
        id: "project1"
        user_id: 1
        name: "Project One"
    NewExternalProject:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
      example:
        id: "project1"
        name: "Project One"
    ForbiddenResponseBody:
      type: object
      properties:
        error:
          type: string
          example: "Forbidden"
        message:
          type: string
          example: "You do not have permission to access this resource."
    InternalServerErrorBody:
      type: object
      properties:
        error:
          type: string
          example: "Internal Server Error"
    EmailInUseErrorBody:
      type: object
      properties:
        error:
          type: string
          example: "Email is already in use"
    InvalidInputErrorBody:
      type: object
      properties:
        field:
          type: string
          example: "Entity.id"
        message:
          type: string
          example: "field should not be null"
        rejectedValue:
          type: string
          example: "null"
    ProjectAlreadyAssignedBody:
      type: object
      properties:
        error:
          type: string
          example: "Project with id [1] already exist"
    UnauthorizedBody:
      type: object
      properties:
        error:
          type: string
          example: "Unauthorized access. Please provide valid credentials."
    ConcurrencyExceptionBody:
      type: object
      properties:
        error:
          type: string
          example: "Concurrency Conflict"
        message:
          type: string
          example: "This resource was modified by another user. Please try again."
  requestBodies:
    Credentials:
      description: User credentials
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Credentials'
          examples:
            example-1:
              summary: Valid credentials
              value:
                email: "user@example.com"
                password: "password123"
    NewUser:
      description: New user data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewUser'
          examples:
            example-1:
              value:
                email: "newuser@example.com"
                password: "newpassword123"
                name: "New User"
    NewExternalProject:
      description: New external project data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewExternalProject'
          examples:
            example-1:
              value:
                id: "project1"
                name: "Project One"
  responses:
    AuthResponse:
      description: Successfully authenticated
      headers:
        trace.id:
          description: Trace ID for the request
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthResponse'
          examples:
            example-1:
              value:
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    UserResponse:
      description: Successfully retrieved user
      headers:
        trace.id:
          description: Trace ID for the request
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            example-1:
              value:
                id: 1
                email: "user@example.com"
                name: "Existing User"
    UserCreated:
      description: Successfully created user
      headers:
        trace.id:
          description: Trace ID for the request
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            example-1:
              value:
                id: 1
                email: "newuser@example.com"
                name: "New User"
    ExternalProjectCreated:
      description: Successfully added external project
      headers:
        trace.id:
          description: Trace ID for the request
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExternalProject'
          examples:
            example-1:
              value:
                id: "project1"
                user_id: 1
                name: "Project One"
    ExternalProjectsResponse:
      description: Successfully retrieved external projects
      headers:
        trace.id:
          description: Trace ID for the request
          schema:
            type: string
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ExternalProject'
          examples:
            example-1:
              value:
                - id: "project1"
                  user_id: 1
                  name: "Project One"
                - id: "project2"
                  user_id: 1
                  name: "Project Two"
    UnauthorizedError:
      description: Unauthorized access
      headers:
        trace.id:
          description: Trace ID for the request
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedBody'
          examples:
            example-1:
              value:
                error: "Unauthorized access. Please provide valid credentials."
    UserNotFoundError:
      description: User not found
      headers:
        trace.id:
          description: Trace ID for the request
          schema:
            type: string
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "User not found"
          examples:
            example-1:
              value:
                error: "User not found"
    InvalidInputError:
      description: Invalid input data
      headers:
        trace.id:
          description: Trace ID for the request
          schema:
            type: string
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/InvalidInputErrorBody"
          examples:
            example-1:
              value:
                - field: "email"
                  message: "must be a well-formed email address"
                  rejectedValue: "invalid-email"
                - field: "password"
                  message: "must not be null"
                  rejectedValue: "null"
    EmailInUseError:
      description: Email is already in use
      headers:
        trace.id:
          description: Trace ID for the request
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EmailInUseErrorBody"
          examples:
            example-1:
              value:
                error: "Email is already in use"
    UserHasProjectAlreadyAssigned:
      description: Project already exists
      headers:
        trace.id:
          description: Trace ID for the request
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProjectAlreadyAssignedBody"
          examples:
            example-1:
              value:
                error: "Project with id [project1] already exists"
    UserProjectsConflict409Error:
      description: Conflict 409 error responses possible
      headers:
        trace.id:
          description: Trace ID for the request
          schema:
            type: string
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/ProjectAlreadyAssignedBody'
              - $ref: '#/components/schemas/ConcurrencyExceptionBody'
    UsersConflict409Error:
      description: Conflict 409 error for users post resource responses possible
      headers:
        trace.id:
          description: Trace ID for the request
          schema:
            type: string
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/EmailInUseErrorBody'
              - $ref: '#/components/schemas/ConcurrencyExceptionBody'
    InternalServerError:
      description: Internal Server Error
      headers:
        trace.id:
          description: Trace ID for the request
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InternalServerErrorBody"
          examples:
            example-1:
              value:
                error: "Internal Server Error"
    ForbiddenError:
      description: Forbidden access
      headers:
        trace.id:
          description: Trace ID for the request
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ForbiddenResponseBody"
          examples:
            example-1:
              value:
                error: "Forbidden"
                message: "You do not have permission to access this resource."
    UserUpdated:
      description: Successfully updated user
      headers:
        trace.id:
          description: Trace ID for the request
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            example-1:
              value:
                id: 1
                email: "updateduser@example.com"
                name: "Updated User"
    ConcurrencyError:
      description: Concurrency conflict error
      headers:
        trace.id:
          description: Trace ID for the request
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConcurrencyExceptionBody'
          examples:
            example-1:
              value:
                error: "Concurrency Conflict"
                message: "This resource was modified by another user. Please try again."
