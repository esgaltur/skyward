openapi: 3.0.3
info:
  title: User and Project Management API
  description: API for managing users and their external projects
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
    description: Local server
paths:
  /auth/login:
    post:
      summary: Authenticate user and generate JWT token
      operationId: authenticateUser
      requestBody:
        description: User credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
            examples:
              example-1:
                summary: Valid credentials
                value:
                  email: "user@example.com"
                  password: "password123"
      responses:
        '200':
          description: Successfully authenticated
          headers:
            trace-id:
              description: Trace ID for the request
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              examples:
                example-1:
                  value:
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Unauthorized
          headers:
            trace-id:
              description: Trace ID for the request
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized
              examples:
                example-1:
                  value:
                    error: "Unauthorized"
  /users:
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        description: New user data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
            examples:
              example-1:
                value:
                  email: "newuser@example.com"
                  password: "newpassword123"
                  name: "New User"
      responses:
        '201':
          description: Successfully created user
          headers:
            trace-id:
              description: Trace ID for the request
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example-1:
                  value:
                    id: 1
                    email: "newuser@example.com"
                    name: "New User"
        '400':
          description: Invalid input
          headers:
            trace-id:
              description: Trace ID for the request
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input data"
              examples:
                example-1:
                  value:
                    error: "Invalid input data"
  /users/{id}:
    get:
      summary: Retrieve user information
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved user
          headers:
            trace-id:
              description: Trace ID for the request
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example-1:
                  value:
                    id: 1
                    email: "user@example.com"
                    name: "Existing User"
        '401':
          description: Unauthorized
          headers:
            trace-id:
              description: Trace ID for the request
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
              examples:
                example-1:
                  value:
                    error: "Unauthorized"
        '404':
          description: User not found
          headers:
            trace-id:
              description: Trace ID for the request
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
              examples:
                example-1:
                  value:
                    error: "User not found"
    delete:
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully deleted user
          headers:
            trace-id:
              description: Trace ID for the request
              schema:
                type: string
        '401':
          description: Unauthorized
          headers:
            trace-id:
              description: Trace ID for the request
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
              examples:
                example-1:
                  value:
                    error: "Unauthorized"
        '404':
          description: User not found
          headers:
            trace-id:
              description: Trace ID for the request
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
              examples:
                example-1:
                  value:
                    error: "User not found"
  /users/{id}/projects:
    post:
      summary: Add external project to a user
      operationId: addExternalProject
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      requestBody:
        description: New external project data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewExternalProject'
            examples:
              example-1:
                value:
                  id: "project1"
                  name: "Project One"
      responses:
        '201':
          description: Successfully added external project
          headers:
            trace-id:
              description: Trace ID for the request
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalProject'
              examples:
                example-1:
                  value:
                    id: "project1"
                    user_id: 1
                    name: "Project One"
        '400':
          description: Invalid input
          headers:
            trace-id:
              description: Trace ID for the request
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input data"
              examples:
                example-1:
                  value:
                    error: "Invalid input data"
    get:
      summary: Retrieve external projects from a user
      operationId: getExternalProjects
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved external projects
          headers:
            trace-id:
              description: Trace ID for the request
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalProject'
              examples:
                example-1:
                  value:
                    - id: "project1"
                      user_id: 1
                      name: "Project One"
                    - id: "project2"
                      user_id: 1
                      name: "Project Two"
        '401':
          description: Unauthorized
          headers:
            trace-id:
              description: Trace ID for the request
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
              examples:
                example-1:
                  value:
                    error: "Unauthorized"
        '404':
          description: User not found
          headers:
            trace-id:
              description: Trace ID for the request
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
              examples:
                example-1:
                  value:
                    error: "User not found"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Credentials:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: "user@example.com"
        password: "password123"
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        name:
          type: string
      example:
        id: 1
        email: "user@example.com"
        name: "John Doe"
    NewUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string
      example:
        email: "newuser@example.com"
        password: "newpassword123"
        name: "New User"
    ExternalProject:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: integer
        name:
          type: string
      example:
        id: "project1"
        user_id: 1
        name: "Project One"
    NewExternalProject:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      example:
        id: "project1"
        name: "Project One"
security:
  - bearerAuth: []
