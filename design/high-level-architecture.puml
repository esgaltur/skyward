@startuml
!define ENTITY(entityName) class entityName << (E,#FFAAAA) Entity >>
!define REPOSITORY(repositoryName) class repositoryName << (R,#AAAAFF) Repository >>
!define SERVICE(serviceName) class serviceName << (S,#AAFFAA) Service >>
!define CONFIG(configName) class configName << (C,#FFD700) Config >>
!define FILTER(filterName) class filterName << (F,#FFD700) Filter >>
!define CONTROLLER(controllerName) class controllerName << (C,#FFDD44) Controller >>

package com.skyward.data.model {
    ENTITY(UserEntity) {
        +Long id
        +String email
        +String password
        +String name
        +String role
        +boolean accountExpired
        +boolean accountLocked
        +boolean credentialsExpired
        +boolean disabled
        +Set<UserExternalProjectEntity> externalProjects
    }

    ENTITY(UserExternalProjectEntity) {
        +Long id
        +String projectId
        +UserEntity user
        +String name
    }
}

package com.skyward.data.repository {
    REPOSITORY(UserRepository) {
        +findByEmail(String email) : Optional<UserEntity>
    }

    REPOSITORY(UserExternalProjectRepository) {
        +findByUserId(Long userId) : List<UserExternalProjectEntity>
    }
}

package com.skyward.security {
    SERVICE(UserDetailsServiceImpl) {
        -UserRepository userRepository
        +loadUserByUsername(String email) : UserDetails
    }

    CONFIG(SecurityConfig) {
        +PasswordEncoder passwordEncoder()
        +SecurityFilterChain securityFilterChain(HttpSecurity http) : SecurityFilterChain
        +AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) : AuthenticationManager
    }

    class JwtTokenProvider
    class JwtTokenFilter
}

package com.skyward.service {
    SERVICE(UserProjectService) {
        +createUser(NewUserDTO newUser) : CompletableFuture<User>
        +getUserById(Long id) : CompletableFuture<Optional<User>>
        +deleteUser(Long id)
        +updateUser(Long id, UpdateUserDTO updatedUser) : CompletableFuture<Boolean>
        +assignProjectToUser(Long userId, NewExternalProjectDTO newProject) : CompletableFuture<ExternalProject>
        +getProjectsByUserId(Long userId) : CompletableFuture<List<ExternalProject>>
    }
}

package com.skyward.tracing {
    CONFIG(OpenTelemetryConfig) {
        +OpenTelemetry openTelemetry() : OpenTelemetry
        +Tracer tracer(OpenTelemetry openTelemetry) : Tracer
    }

    FILTER(TraceFilter) {
        -Tracer tracer
        +filter(ContainerRequestContext requestContext) : void
        +filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) : void
    }
}

package com.skyward.api {
    CONTROLLER(UserController) {
        +createUser(NewUser newUser) : Response
        +getUserById(Long id) : Response
        +deleteUser(Long id) : Response
        +updateUser(Long id, UpdateUser updatedUser) : Response
        +addExternalProject(Long userId, NewExternalProject newProject) : Response
        +getExternalProjects(Long userId) : Response
    }
}

UserDetailsServiceImpl --> UserRepository
UserDetailsServiceImpl --> JwtTokenProvider
UserDetailsServiceImpl --> JwtTokenFilter
SecurityConfig --> UserDetailsServiceImpl
SecurityConfig --> JwtTokenProvider
SecurityConfig --> JwtTokenFilter

UserProjectService --> UserRepository
UserProjectService --> UserExternalProjectRepository

TraceFilter --> OpenTelemetryConfig
TraceFilter --> Tracer

UserController --> UserProjectService
UserController --> UserDetailsServiceImpl

@enduml
